#Name: Manas
#Roll No: 2018244
#Section: B
#Group: 5

"""
This module retrieves weather data from openweathermap.org and parses it to get values of the attributes.
The data is arranged by specific date and time and for getting values, valid attributes are temperature, 
humidity, pressure, wind speed and sea level.
The data available is from current date of retrieval upto fourth day. Also, data is not available for the
time before it's fetch.
"""

import urllib.request
import datetime

def DateTime(n=0, t="03:00:00"):
	"""
	Returns a string containing nth day from current day and provided time in "YYYY-MM-DD HH:MM:SS" format.

	Parameters
	==========

	n: nth day from the current date
	   valid inputs - 0, 1, 2, 3, 4
	t: time in string
	   format - HH:MM:SS
	   valid inputs - MM:SS should be zero, HH can take values 00, 03, 06, 09, 12, 15, 18, 21 
	"""

	currentDate = datetime.date.today()
	requiredDate = currentDate + datetime.timedelta(days=n)
	requiredDate = str(requiredDate)

	return (requiredDate + ' ' + t)


def weather_response(location, API_key):
	"""
	Returns a string object of raw json data retrieved from url provided below if found, otherwise an error string.

	Parameters
	==========

	location: a string of valid city name from anywhere around the world
	API_key: a valid api key string generated by the data provider
	"""

	try:
		url = 'http://api.openweathermap.org/data/2.5/forecast?q='+location+'&APPID='+API_key
		rawData = urllib.request.urlopen(url)
	
	except urllib.error.HTTPError as error:
		return(str(error))

	else:
		jsonData = rawData.read()
		jsonData = jsonData.decode("ascii")
		return(jsonData)
 

def has_error(location,json):
	"""
	Returns a False value if location is found in json (case-insensitive, whitespace sensitive), otherwise True.

	Parameters
	==========

	location: a string of valid city name from anywhere around the world
	json: a string object containing json data fetched from the site mentioned in weather_response() method
	"""

	startIndexOfCityName = json.find('"name":')+8
	endIndexOfCityName = json.find(",", startIndexOfCityName)-1
	cityName = json[ startIndexOfCityName : endIndexOfCityName ]
	
	if location.title() in cityName:
		return False
	else:
		return True


def get_temperature (json, n=0, t="03:00:00"):
	"""
	Returns a value of the attribute Temperature from json data differentiated by date and time if found, otherwise None object.
	
	Parameters
	==========

	json: a string object containing json data fetched from the site mentioned in weather_response() method
	n: nth day from the current date
	   valid inputs - 0, 1, 2, 3, 4
	t: time in string
	   format - HH:MM:SS
	   valid inputs - MM:SS should be zero, HH can take values 00, 03, 06, 09, 12, 15, 18, 21 
	"""
	dateAndTime = DateTime(n, t)
	endIndex = json.find(dateAndTime)
	
	if endIndex == -1:
		return (None)

	else:
		startIndexOfTemp = json.rfind('"temp":', 0, endIndex)
		endIndexOfTemp = json.find(',', startIndexOfTemp)

		temperature = json[startIndexOfTemp+7 : endIndexOfTemp]
		return (float(temperature))


def get_humidity(json, n=0, t="03:00:00"):
	"""
	Returns a value of the attribute Humidity from json data differentiated by date and time if found, otherwise None object.
	
	Parameters
	==========

	json: a string object containing json data fetched from the site mentioned in weather_response() method
	n: nth day from the current date
	   valid inputs - 0, 1, 2, 3, 4
	t: time in string
	   format - HH:MM:SS
	   valid inputs - MM:SS should be zero, HH can take values 00, 03, 06, 09, 12, 15, 18, 21 
	"""
	dateAndTime = DateTime(n, t)
	endIndex = json.find(dateAndTime)

	if endIndex == -1:
		return (None)

	else:
		startIndexOfHumidity = json.rfind('"humidity":', 0, endIndex)
		endIndexOfHumidity = json.find(',', startIndexOfHumidity)

		humidity = json[startIndexOfHumidity+11:endIndexOfHumidity]
		return (int(humidity))


def get_pressure(json, n=0, t="03:00:00"):
	"""
	Returns a value of the attribute Pressure from json data differentiated by date and time if found, otherwise None object.
	
	Parameters
	==========

	json: a string object containing json data fetched from the site mentioned in weather_response() method
	n: nth day from the current date
	   valid inputs - 0, 1, 2, 3, 4
	t: time in string
	   format - HH:MM:SS
	   valid inputs - MM:SS should be zero, HH can take values 00, 03, 06, 09, 12, 15, 18, 21 
	"""
	dateAndTime = DateTime(n, t)
	endIndex = json.find(dateAndTime)

	if endIndex == -1:
		return (None)

	else:
		startIndexOfPressure = json.rfind('"pressure":', 0, endIndex)
		endIndexOfPressure = json.find(',', startIndexOfPressure)

		pressure = json[startIndexOfPressure+11:endIndexOfPressure]
		return (float(pressure))


def get_wind(json, n=0, t="03:00:00"):
	"""
	Returns a value of the attribute Wind Speed from json data differentiated by date and time if found, otherwise None object.
	
	Parameters
	==========

	json: a string object containing json data fetched from the site mentioned in weather_response() method
	n: nth day from the current date
	   valid inputs - 0, 1, 2, 3, 4
	t: time in string
	   format - HH:MM:SS
	   valid inputs - MM:SS should be zero, HH can take values 00, 03, 06, 09, 12, 15, 18, 21 
	"""
	dateAndTime = DateTime(n, t)
	endIndex = json.find(dateAndTime)

	if endIndex == -1:
		return (None)

	else:
		startIndexOfWindSpeed = json.rfind('"wind":{"speed":', 0, endIndex)
		endIndexOfWindSpeed = json.find(',', startIndexOfWindSpeed)

		windSpeed = json[startIndexOfWindSpeed+16:endIndexOfWindSpeed]
		return (float(windSpeed))


def get_sealevel(json, n=0, t="03:00:00"):
	"""
	Returns a value of the attribute Wind Speed from json data differentiated by date and time if found, otherwise None object.
	
	Parameters
	==========

	json: a string object containing json data fetched from the site mentioned in weather_response() method
	n: nth day from the current date
	   valid inputs - 0, 1, 2, 3, 4
	t: time in string
	   format - HH:MM:SS
	   valid inputs - MM:SS should be zero, HH can take values 00, 03, 06, 09, 12, 15, 18, 21 
	"""
	dateAndTime = DateTime(n, t)
	endIndex = json.find(dateAndTime)

	if endIndex == -1:
		return (None)

	else:
		startIndexOfSeaLevel = json.rfind('"sea_level":', 0, endIndex)
		endIndexOfSeaLevel = json.find(',', startIndexOfSeaLevel)

		seaLevel = json[startIndexOfSeaLevel+12:endIndexOfSeaLevel]
		return (float(seaLevel))
